delimiters "$", "$"

decap(str) ::= "$str; format=\"decap\"$"

openClassDef(name, extendClause) ::= <<
class Rich$name$[V <: $name$](val basis: V) extends Trait$name$[V]
@inline implicit def $decap(name)$2Rich$name$[V <: $name$]($decap(name)$: V) = new Rich$name$[V]($decap(name)$)

trait Trait$name$[V <: $name$]$if(extendClause)$ extends $extendClause$$endif$ {
>>

closeClassDef() ::= "}"


// Listener

paramTypes(types) ::= "($types; separator=\", \"$)"

params(types) ::= "$types:{ t | p$i0$: $t$}; separator=\", \"$"

callParams(types) ::= "$types:{ t | p$i0$}; separator=\", \"$"

callbackBody(method, isUnit = false) ::= <%
$if(method.hasBody)$
  $if(isUnit)$
    f()
  $else$
    f($callParams(method.paramTypes)$)
  $endif$
$endif$
%>

callbackMethod(method, isUnit = false) ::= <<
def $method.name$($params(method.paramTypes)$): $method.retType$ = { $callbackBody(method, isUnit)$ }
>>

unitCallbackMethod(method) ::= "$callbackMethod(method, true)$"

fullListener(l) ::= <<
@inline def $l.name$(f: $paramTypes(l.paramTypes)$ => $l.retType$): V {
  basis.$l.setter$(new $l.callbackClassName$ {
    $l.callbackMethods:callbackMethod(); separator="\n"$
  })
  basis
}
>>

unitListener(l) ::= <<
@inline def $l.name$(f: => $l.retType$): V {
  basis.$l.setter$(new $l.callbackClassName$ {
    $l.callbackMethods:unitCallbackMethod(); separator="\n"$
  })
  basis
}
>>

listener(l) ::= <<
$fullListener(l)$

$unitListener(l)$
>>

listeners(cls) ::= "$cls.listeners:listener(); separator=\"\n\n\"$"


// property

getter(prop) ::= <<
@inline def $prop.name$ = basis.$prop.getter$
>>

defaultGetter(prop) ::= <<
@noEquivalentGetterExists
@inline def $prop.name$   : $prop.tpe$  = defaultValue[$prop.tpe$]
>>

setters(prop) ::= <<
@inline def $prop.name$  (p: $prop.tpe$) =            $prop.name$_=  (p)
@inline def $prop.name$_=(p: $prop.tpe$) = { basis.$prop.setter$    (p); basis }
>>

property(prop) ::= <<
$if(prop.getter)$$getter(prop)$$else$$defaultGetter(prop)$$endif$
$if(prop.setter)$$setters(prop)$
$endif$
>>

properties(cls) ::= "$cls.properties:property(); separator=\"\n\"$"

