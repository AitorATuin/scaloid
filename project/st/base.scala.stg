delimiters "$", "$"

cap(str) ::= <<$str; format="cap"$>>
decap(str) ::= <<$str; format="decap"$>>

name(t) ::= <<$t.name$>>
names(ts) ::= <<$ts:name(); separator=", "$>>

isEmpty ::= [
  "" : true
]

// Implicit 

implicitConversions(pkg) ::= <<
$pkg:{ c | $implicitConversion(pkg.(c))$}$
>>

implicitConversion(base) ::= <<$_implicitConversion(base.name)$>>
_implicitConversion(name) ::= <<
$if( base.constructors && ! base.isAbstract)$@inline implicit def $decap(name)$2Rich$name$[V <: $genType(base.tpe, true)$]($decap(name)$: V) = new Rich$name$[V]($decap(name)$)
$endif$
>>


// Class

wholeClassDef(base, mixin, body) ::= <<
$richClassDef(...)$

$if(! base.isAbstract && ! base.isFinal)$
$concreteClassDef(base)$

$companionObjectDef(...)$
$endif$
>>

extendClause(parent, mixin) ::= <%
$if(parent || mixin)$ extends $endif$
$if(parent)$Trait$parent.name; format="simple"$[V]$endif$
$if(parent && mixin)$ with $endif$
$mixin; separator=" with "$
%>

richClassDef(base, mixin, body) ::= <<
$openRichClassDef(...)$
$({$base.name$_traitBody})()$
$closeRichClassDef(...)$
>>

openRichClassDef(base, mixin, body) ::= <<$_openRichClassDef(base.name)$>>
_openRichClassDef(name) ::= <<

$if( ! base.isAbstract)$
class Rich$name$[V <: $genType(base.tpe, true)$](val basis: V) extends Trait$name$[V]
$endif$

trait Trait$name$[V <: $genType(base.tpe, true)$]$extendClause(base.parentType, mixin)$ {

  $if(! base.parentType)$def basis: V$endif$
>>

closeRichClassDef(base) ::= <<
  $properties(base)$
  $listeners(base)$
}
>>

withPrefix(name) ::= "S$name$"

concreteClassDef(base) ::= <<$_concreteClassDef(base.name, withPrefix(base.name))$>>

_concreteClassDef(name, prefixedName) ::= <<
trait $prefixedName$$paramedTypes(base.tpe.params)$ extends $genType(base.tpe)$ with Trait$name$[$prefixedName$$typeVar(base.tpe)$] { self =>
  def basis = self

$({$base.name$_concreteBody})()$

}
>>

// companion object

companionObjectDef(base) ::= <<$_companionObjectDef(base.name, withPrefix(base.name))$>>
_companionObjectDef(name, prefixedName) ::= <<
object $prefixedName$ {

  $constructors()$

  $customFullConstructors()$

}
>>

customConst(kind, sep) ::= <%
$kind:{ key |
  $if(base.isA.(key))$
    $kind.(key); separator=sep$
  $endif$
}; separator=sep$
%>

customConstTypeParams() ::= <<$customConst(ConstTypeParams, ", ")$>>
ConstTypeParams ::= [
  "View" : {LP <: ViewGroupLayoutParams[_, $prefixedName$]}
]

customConstImplicitArgs() ::= <<$customConst(ConstImplicitArgs, ", ")$>>
ConstImplicitArgs ::= [
  "View" : {defaultLayoutParam: $prefixedName$ => LP}
]

customConstImplicitBodies() ::= <<$customConst(ConstImplicitBodies, "\n")$>>
ConstImplicitBodies ::= [
  "View" : {v.<<.parent.+=(v)}
]

customFullConstructors() ::= <<$customConst(FullConstructors, "\n")$>>
FullConstructors ::= [
  "TextView" : <<
def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]](txt: CharSequence)
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ =  {
  val v = new $name$(context) with $prefixedName$
  v text txt
  v.<<.parent.+=(v)
  v
}
>>,

  "Button" : <<
def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]](text: CharSequence, onClickListener: (View) => Unit)
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ = {
  apply(text, func2ViewOnClickListener(onClickListener))
}

def apply[LP <: ViewGroupLayoutParams[_, $prefixedName$]](text: CharSequence, onClickListener: OnClickListener = {})
    (implicit context: Context, defaultLayoutParam: ($prefixedName$) => LP): $prefixedName$ = {
  val v = new $name$(context) with $prefixedName$
  v.text = text
  v.setOnClickListener(onClickListener)
  v.<<.parent.+=(v)
  v
}
>>
]

constArgs(args) ::= <%
$args:{ a | $a.name$: $genType(a.tpe)$}; separator=", "$
%>

constImplicitArgs() ::= <<$_constImplicitArgs(con.implicitArgs, customConstImplicitArgs())$>>
_constImplicitArgs(args, customArgs) ::= <%
$if (first(args).name || !isEmpty.(customArgs))$
(implicit $! "placeholder for traling space" !$
  $if (isEmpty.(customArgs))$
    $constArgs(args)$
  $else$
    $strip([constArgs(args), customArgs]); separator=", "$
  $endif$
)
$endif$
%>

constTypeParams() ::= <<$_constTypeParams(con.paramedTypes, strip(customConstTypeParams()))$>>
_constTypeParams(pTypes, customTypes) ::= <%
$if (first(pTypes).name || !isEmpty.(customTypes))$
[
  $if (isEmpty.(customTypes))$
    $pTypes:{t | $paramedType(t, true)$}; separator=", "$
  $else$
    $strip([pTypes:{t | $paramedType(t, true)$}, customTypes]); separator=", "$
  $endif$
]
$endif$
%>

constructor(con) ::= <<
def apply$constTypeParams()$($constArgs(con.explicitArgs)$)$constImplicitArgs()$: $prefixedName$$typeVar(base.tpe)$ = {
  val v = new $name$$typeVar(base.tpe)$($con.args:{a | $a.name$}; separator=", "$) with $prefixedName$$typeVar(base.tpe)$
  $customConstImplicitBodies()$
  v
}
>>

constructors() ::= <<
$base.constructors:constructor(); separator="\n\n"$
>>


// method

typeVar(t, erased = false) ::= <%
$if(first(t.bounds).name)$
  $paramedType(t)$
$elseif(first(t.params).name)$
[
  $if(erased)$
    _
  $else$
    $t.params:genType(); separator=", "$
  $endif$
]
$endif$
%>

genType(t, erased = false) ::= <%
$if( ! first(t.bounds).name)$$t.name$$endif$
$typeVar(t, erased)$
%>

argTypes(types) ::= <%
$if(first(rest(types)))$
($types:genType(); separator=", "$)
$else$
$genType(first(types))$
$endif$
%>

namedArgs(types) ::= <%
$if(first(rest(types)).name)$
$types:{ t | p$i$: $genType(t)$}; separator=", "$
$elseif(first(types).name)$
p: $genType(first(types))$
$endif$
%>

callArgs(types) ::= <%
$if(first(rest(types)).name)$
$types:{ t | p$i$}; separator=", "$
$elseif(first(types).name)$
p
$endif$
%>

paramedType(t, define = false) ::= <%
$t.name$
$if(define || ! t.isVar)$ <: $t.bounds:genType(); separator=" with "$$endif$
%>

paramedTypes(pTypes) ::= <%
$if(first(pTypes).name)$
[$pTypes:{ t | $paramedType(t, true)$}; separator=", "$]
$endif$
%>


// listener

callbackBody(method, isUnit = false) ::= <%
$if(method.hasBody)$
  $if(isUnit)$
    f
  $else$
    f($callArgs(method.argTypes)$)
  $endif$
$endif$
%>

callbackMethod(method, isUnit = false) ::= <<
def $method.name$$paramedTypes(paramedTypes, true)$($namedArgs(method.argTypes)$): $genType(method.retType)$ = { $callbackBody(...)$ }
>>

unitCallbackMethod(method) ::= <<$callbackMethod(method, true)$>>

fullListener(l) ::= <<
@inline def $l.name$(f: $argTypes(l.argTypes)$ => $genType(l.retType)$): V = {
  basis.$l.setter$(new $l.callbackClassName$ {
    $l.callbackMethods:callbackMethod(); separator="\n"$
  })
  basis
}
>>

unitListener(l) ::= <<
@inline def $l.name$(f: => $genType(l.retType)$): V = {
  basis.$l.setter$(new $l.callbackClassName$ {
    $l.callbackMethods:unitCallbackMethod(); separator="\n"$
  })
  basis
}
>>

listener(l) ::= <<
$if(first(l.argTypes).name)$$fullListener(l)$$endif$

$unitListener(l)$
>>

listeners(base) ::= <<$base.listeners:listener(); separator="\n\n"$>>


// property

override(m) ::= <<$if(m.isOverride)$ override$endif$>>

noGetter(name) ::= <<
@noEquivalentGetterExists
@inline def $name; format="safe-ident"$(implicit no: NoGetterForThisProperty): Nothing = throw new Error("Android does not support the getter for '$name$'")
>>

getter(prop) ::= <<
$if(prop.getter)$
@inline$override(prop.getter)$ def $prop.name; format="safe-ident"$ = basis.$prop.getter.name$
$elseif( ! prop.nameClashes)$
$noGetter(prop.name)$
$endif$
>>

setter(prop, method) ::= <<
$_setter("  ", {           $prop.name$_=  (p)})$
$_setter("_=", {{ basis.$method.name$    (p); basis \}})$
>>

_setter(postFix, body) ::= <%
@inline def ${$prop.name$$postFix$}; format="safe-ident"$
$paramedTypes(method.paramedTypes)$
($namedArgs(method.argTypes)$)
$if( ! method.isAbstract)$ = $body$$endif$
%>

switch(name, setter) ::= <<
@inline def  enable$name$               = { basis.$setter.name$(true ); basis }
@inline def disable$name$               = { basis.$setter.name$(false); basis }
>>

setters(prop) ::= <<
$prop.setters:{ s | $setter(prop, s)$}; separator="\n"$
$if(prop.switch)$
$switch(prop.switch, first(prop.setters))$
$endif$
>>

property(prop) ::= <<$getter(prop)$$setters(prop)$>>

properties(base) ::= <<$base.properties:property()$>>


// service

systemServiceHead(base) ::= <<
@inline def $decap(base.name)$(implicit context: Context) =
  context.getSystemService(Context.$base.name; format="manager-to-service"$).asInstanceOf[$base.tpe.name$]

>>

// etc

license() ::= <<
/* 
 *
 * 
 *
 *
 * Less painful Android development with Scala
 *
 * http://scaloid.org
 *
 *
 *
 *
 *
 *
 * Copyright 2013 Sung-Ho Lee
 *
 * Sung-Ho Lee licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/*
 * This file is automatically generated. Any changes on this file will be overwritten!
 */ 

>>
